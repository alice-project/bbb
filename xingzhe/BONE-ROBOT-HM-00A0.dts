/*
 * Copyright (C) 2013 Bas Laarhoven
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * version 1.1 - 2013-08-01 initial version copied from 2191-R2.dts
 * version 1.2 - 2013-08-05 created version for BeBoPr with enable workaround.
 *               Can be used with all BeagleBone colors. On a BBB, use with
 *               uEnv.txt that disables HDMI and eMMC and loads this overlay,
 *               as shown below (optargs all on a single line!):
 *
 *                  optargs=quiet capemgr.disable_partno=BB-BONELT-HDMI,\
 *                                                       BB-BONELT-HDMIN,\
 *                                capemgr.enable_partno=bone-robot-hm
 *
 */
/dts-v1/;
/plugin/;

/ {
	compatible = "ti,beaglebone", "ti,beaglebone-black";

	/* identification */
	part-number = "BONE-ROBOT-HM";
	version = "00A0";

	exclusive-use =
	/* state the resources this cape uses */

	/* ------ PWM ------ */
		"P8.13",    /* EHRPWM2B */
		"P8.19",    /* EHRPWM2A */
		"P9.21",    /* EHRPWM0B */
		"P9.22",    /* EHRPWM0A */
		"ehrpwm2A",
		"ehrpwm2B",
		"ehrpwm0A",
		"ehrpwm0B",

	/* ------ DC MOTOR DIRECTION ------ */
		"P9.11",    /* gpio0.30 */
		"P9.12",    /* gpio1.28 */
		"P9.13",    /* gpio0.31 */
		"P9.14",    /* gpio1.18 */

	/* ------ DC MOTOR Decoder ------ */
        "P8.16",    /* pr1_pru0_pru_r31_14,  left side */
        "P8.27",    /* pr1_pru1_pru_r31_8,  right side */
		"pru0",
		"pru1",
		"pruss",

	/* ------ KEYES LED ------ */
        "P9.15",
        "P9.16",
        "P9.23",

	/* ------ MPU6050 ------ */
		/* the pin header uses */
		"P9.20",	/* i2c2_sda */
		"P9.19",	/* i2c2_scl */
        "P8.7",     /* interrupt flag */
		/* the hardware ip uses */
		"i2c1",
		"i2c2";

	/* ----------- PWM ------------ */
	fragment@10 {
		target = <&epwmss0>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@11 {
		target = <&ehrpwm0>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@12 {
		target = <&ecap0>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@13 {
		target = <&epwmss1>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@14 {
		target = <&ehrpwm1>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@15 {
		target = <&epwmss2>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@16 {
		target = <&ehrpwm2>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@17 {
		target = <&ecap2>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@18 {
		target = <&am33xx_pinmux>;
		__overlay__ {

			P8_13_ehrpwm_pin: P8_13_ehrpwm_pin {
				pinctrl-single,pins = <0x24  0x4>; /* P8_13 | MODE 4 */
			};

			P8_19_ehrpwm_pin: P8_19_ehrpwm_pin {
				pinctrl-single,pins = <0x20  0x4>; /* P8_19 | MODE 4 */
			};

			P9_21_ehrpwm_pin: P9_21_ehrpwm_pin {
				pinctrl-single,pins = <0x154  0x3>; /* P9_21 | MODE 3 */
			};

			P9_22_ehrpwm_pin: P9_22_ehrpwm_pin {
				pinctrl-single,pins = <0x150  0x3>; /* P9_22 | MODE 3 */
			};

		};
	};

	fragment@19 {
		target = <&ocp>;
		__overlay__ {
			left_wheel {
				compatible	= "pwm_test";
				pwms		= <&ehrpwm2 1 20000000 0>;
				pwm-names	= "left_wheel";
				pinctrl-names	= "default";
				pinctrl-0	= <&P8_13_ehrpwm_pin>;
				enabled		= <0>;
				duty		= <1500000>;
				status		= "okay";
			};

			right_wheel {
				compatible	= "pwm_test";
				pwms		= <&ehrpwm2 0 20000000 0>;
				pwm-names	= "right_wheel";
				pinctrl-names	= "default";
				pinctrl-0	= <&P8_19_ehrpwm_pin>;
				enabled		= <0>;
				duty		= <1500000>;
				status		= "okay";
			};

			servo_motor1_pwm {
				compatible	= "pwm_test";
				pwms		= <&ehrpwm0 0 20000000 0>;
				pwm-names	= "servo_motor1";
				pinctrl-names	= "default";
				pinctrl-0	= <&P9_22_ehrpwm_pin>;
				enabled		= <0>;
				duty		= <1500000>;
				status		= "okay";
			};

			servo_motor2_pwm {
				compatible	= "pwm_test";
				pwms		= <&ehrpwm0 1 20000000 0>;
				pwm-names	= "servo_motor2";
				pinctrl-names	= "default";
				pinctrl-0	= <&P9_21_ehrpwm_pin>;
				enabled		= <0>;
				duty		= <1500000>;
				status		= "okay";
			};
		};
	};

	/* ----------- DC MOTOR DIRECTION ------------ */
	fragment@30 {
		target = <&am33xx_pinmux>;
		__overlay__ {

			motor_dir_pins: motor_dir_pins {
				status = "okay";
				pinctrl-single,pins = <
					0x70 0x17   /* P9_11, gpio0.30  */
					0x78 0x17   /* P9_12, gpio1.28  */
					0x74 0x17   /* P9_13, gpio0.31  */
					0x48 0x17   /* P9_14, gpio1.18  */
				>;
			};
		};
	};

	/* ----------- DC MOTOR Decoder ------------ */
	fragment@40 {
		target = <&am33xx_pinmux>;
		__overlay__ {
			motor_decoder_pinmux: motor_decoder_pinmux {
				status = "okay";
				pinctrl-single,pins = <
					0x38 0x2e   /* pr1_pru0_pru_r31_14, leftside, P8_16, mode6 in */
					0xe0 0x2e   /* pr1_pru1_pru_r31_8, rightside, P8_27, mode6 in */
				>;
			};
		};
	};

	fragment@41 {
		target = <&ocp>;
		__overlay__ {
		  motor_decoder_helper: helper {
			compatible = "bone-pinmux-helper";
			pinctrl-names = "default";
			pinctrl-0 = <&motor_decoder_pinmux>;
			status = "okay";
		  };
		};
	};

	fragment@42 {
		target = <&pruss>;
		__overlay__ {
			status = "okay";
		};
	};

	/* -------------------------- MPU6050 --------------------- */
	fragment@50 {
		target = <&am33xx_pinmux>;
		__overlay__ {
			hm_gyro_pins: pinmux_hm_gyro_pins {
				pinctrl-single,pins = <
					0x178 0x73	/* spi0_d1.i2c1_sda, SLEWCTRL_SLOW | INPUT_PULLUP | MODE2 */
					0x17c 0x73	/* spi0_cs0.i2c1_scl, SLEWCTRL_SLOW | INPUT_PULLUP | MODE2 */
                    0x90 0x37   /* gpio2[2] acts as the interrupt flag */
				>;
			};
		};
	};

	/* ----------- shining KEYES LED ------------ */
	fragment@60 {
		target = <&am33xx_pinmux>;
		__overlay__ {

			keyes_led_pins: keyes_led_pins {
				status = "okay";
				pinctrl-single,pins = <
					0x40 0x7   /* P9_15, gpio1.16, RED  */
					0x4c 0x7   /* P9_16, gpio1.19, GREEN  */
					0x44 0x7   /* P9_23, gpio1.17, BLUE  */
				>;
			};
		};
	};
};
