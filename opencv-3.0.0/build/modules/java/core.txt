PORTED FUNCs LIST (103 of 103):

 float cubeRoot(float val)
 void cartToPolar(Mat x, Mat y, Mat& magnitude, Mat& angle, bool angleInDegrees = false)
 void phase(Mat x, Mat y, Mat& angle, bool angleInDegrees = false)
 void log(Mat src, Mat& dst)
 void polarToCart(Mat magnitude, Mat angle, Mat& x, Mat& y, bool angleInDegrees = false)
 void max(Mat src1, Mat src2, Mat& dst)
 void pow(Mat src, double power, Mat& dst)
 void sqrt(Mat src, Mat& dst)
 void exp(Mat src, Mat& dst)
 bool checkRange(Mat a, bool quiet = true,  _hidden_ * pos = 0, double minVal = -DBL_MAX, double maxVal = DBL_MAX)
 void magnitude(Mat x, Mat y, Mat& magnitude)
 double getTickFrequency()
 int64 getTickCount()
 void mulTransposed(Mat src, Mat& dst, bool aTa, Mat delta = Mat(), double scale = 1, int dtype = -1)
 String getBuildInformation()
 void patchNaNs(Mat& a, double val = 0)
 void gemm(Mat src1, Mat src2, double alpha, Mat src3, double beta, Mat& dst, int flags = 0)
 void completeSymm(Mat& mtx, bool lowerToUpper = false)
 void transpose(Mat src, Mat& dst)
 void transform(Mat src, Mat& dst, Mat m)
 void perspectiveTransform(Mat src, Mat& dst, Mat m)
 void setIdentity(Mat& mtx, Scalar s = Scalar(1))
 bool solve(Mat src1, Mat src2, Mat& dst, int flags = DECOMP_LU)
 void sort(Mat src, Mat& dst, int flags)
 double determinant(Mat mtx)
 double invert(Mat src, Mat& dst, int flags = DECOMP_LU)
 Scalar trace(Mat mtx)
 void sortIdx(Mat src, Mat& dst, int flags)
 int solveCubic(Mat coeffs, Mat& roots)
 void calcCovarMatrix(Mat samples, Mat& covar, Mat& mean, int flags, int ctype = CV_64F)
 void PCAProject(Mat data, Mat mean, Mat eigenvectors, Mat& result)
 double solvePoly(Mat coeffs, Mat& roots, int maxIters = 300)
 bool eigen(Mat src, Mat& eigenvalues, Mat& eigenvectors = Mat())
 void PCABackProject(Mat data, Mat mean, Mat eigenvectors, Mat& result)
 void PCACompute(Mat data, Mat& mean, Mat& eigenvectors, int maxComponents = 0)
 void PCACompute(Mat data, Mat& mean, Mat& eigenvectors, double retainedVariance)
 void SVDecomp(Mat src, Mat& w, Mat& u, Mat& vt, int flags = 0)
 void SVBackSubst(Mat w, Mat u, Mat vt, Mat rhs, Mat& dst)
 float fastAtan2(float y, float x)
 void inRange(Mat src, Scalar lowerb, Scalar upperb, Mat& dst)
 void setErrorVerbosity(bool verbose)
 int getNumberOfCPUs()
 void subtract(Mat src1, Scalar src2, Mat& dst, Mat mask = Mat(), int dtype = -1)
 void absdiff(Mat src1, Scalar src2, Mat& dst)
 void add(Mat src1, Scalar src2, Mat& dst, Mat mask = Mat(), int dtype = -1)
 void multiply(Mat src1, Scalar src2, Mat& dst, double scale = 1, int dtype = -1)
 void divide(Mat src1, Scalar src2, Mat& dst, double scale = 1, int dtype = -1)
 void compare(Mat src1, Scalar src2, Mat& dst, int cmpop)
 void max(Mat src1, Scalar src2, Mat& dst)
 void min(Mat src1, Scalar src2, Mat& dst)
 void copyMakeBorder(Mat src, Mat& dst, int top, int bottom, int left, int right, int borderType, Scalar value = Scalar())
 void add(Mat src1, Mat src2, Mat& dst, Mat mask = Mat(), int dtype = -1)
 int borderInterpolate(int p, int len, int borderType)
 void subtract(Mat src1, Mat src2, Mat& dst, Mat mask = Mat(), int dtype = -1)
 void multiply(Mat src1, Mat src2, Mat& dst, double scale = 1, int dtype = -1)
 void divide(Mat src1, Mat src2, Mat& dst, double scale = 1, int dtype = -1)
 void divide(double scale, Mat src2, Mat& dst, int dtype = -1)
 void convertScaleAbs(Mat src, Mat& dst, double alpha = 1, double beta = 0)
 void scaleAdd(Mat src1, double alpha, Mat src2, Mat& dst)
 void addWeighted(Mat src1, double alpha, Mat src2, double beta, double gamma, Mat& dst, int dtype = -1)
 Scalar sum(Mat src)
 double norm(Mat src1, Mat src2, int normType = NORM_L2, Mat mask = Mat())
 void LUT(Mat src, Mat lut, Mat& dst)
 int countNonZero(Mat src)
 Scalar mean(Mat src, Mat mask = Mat())
 void findNonZero(Mat src, Mat& idx)
 double norm(Mat src1, int normType = NORM_L2, Mat mask = Mat())
 void meanStdDev(Mat src, vector_double& mean, vector_double& stddev, Mat mask = Mat())
 double PSNR(Mat src1, Mat src2)
 void batchDistance(Mat src1, Mat src2, Mat& dist, int dtype, Mat& nidx, int normType = NORM_L2, int K = 0, Mat mask = Mat(), int update = 0, bool crosscheck = false)
 void merge(vector_Mat mv, Mat& dst)
 void reduce(Mat src, Mat& dst, int dim, int rtype, int dtype = -1)
 void extractChannel(Mat src, Mat& dst, int coi)
 void split(Mat m, vector_Mat& mv)
 void hconcat(vector_Mat src, Mat& dst)
 void mixChannels(vector_Mat src, vector_Mat dst, vector_int fromTo)
 void insertChannel(Mat src, Mat& dst, int coi)
 void repeat(Mat src, int ny, int nx, Mat& dst)
 void flip(Mat src, Mat& dst, int flipCode)
 void bitwise_xor(Mat src1, Mat src2, Mat& dst, Mat mask = Mat())
 void bitwise_and(Mat src1, Mat src2, Mat& dst, Mat mask = Mat())
 void vconcat(vector_Mat src, Mat& dst)
 void bitwise_or(Mat src1, Mat src2, Mat& dst, Mat mask = Mat())
 void bitwise_not(Mat src, Mat& dst, Mat mask = Mat())
 void absdiff(Mat src1, Mat src2, Mat& dst)
 void compare(Mat src1, Mat src2, Mat& dst, int cmpop)
 void min(Mat src1, Mat src2, Mat& dst)
 int64 getCPUTickCount()
 void idft(Mat src, Mat& dst, int flags = 0, int nonzeroRows = 0)
 void dft(Mat src, Mat& dst, int flags = 0, int nonzeroRows = 0)
 double Mahalanobis(Mat v1, Mat v2, Mat icovar)
 void dct(Mat src, Mat& dst, int flags = 0)
 void idct(Mat src, Mat& dst, int flags = 0)
 void mulSpectrums(Mat a, Mat b, Mat& c, int flags, bool conjB = false)
 int getOptimalDFTSize(int vecsize)
 void randu(Mat& dst, double low, double high)
 void randShuffle(Mat& dst, double iterFactor = 1., RNG* rng = 0)
 void randn(Mat& dst, double mean, double stddev)
 double kmeans(Mat data, int K, Mat& bestLabels, TermCriteria criteria, int attempts, int flags, Mat& centers = Mat())
 void normalize(Mat src, Mat& dst, double alpha = 1, double beta = 0, int norm_type = NORM_L2, int dtype = -1, Mat mask = Mat())
 void clear()
 void save(String filename)
 String getDefaultName()

SKIPPED FUNCs LIST (0 of 103):


0 def args - 57 funcs
1 def args - 28 funcs
2 def args - 14 funcs
3 def args - 1 funcs
4 def args - 1 funcs
5 def args - 2 funcs