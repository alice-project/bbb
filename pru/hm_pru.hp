#ifndef _HM_PRU_HP_
#define _HM_PRU_HP_


#define AM33XX

// ***************************************
// *      Global Macro definitions       *
// ***************************************

// Refer to this mapping in the file - \prussdrv\include\pruss_intc_mapping.h
#define PRU0_PRU1_INTERRUPT     17
#define PRU1_PRU0_INTERRUPT     18
#define PRU0_ARM_INTERRUPT      19
#define PRU1_ARM_INTERRUPT      20
#define ARM_PRU0_INTERRUPT      21
#define ARM_PRU1_INTERRUPT      22

#define CONST_PRUCFG    C4
#define CONST_PRUDRAM   C24
#define CONST_L3RAM     C30
#define CONST_DDR       C31

// Address for the Constant table Programmable Pointer Register 0(CTPPR_0)
#define CONTROL_0       0x22000
#define CONTROL_1       0x24000
#define CTBIR_0         0x22020
// Address for the Constant table Programmable Pointer Register 0(CTPPR_0)
#define CTBIR_1         0x22024

// Address for the Constant table Programmable Pointer Register 0(CTPPR_0)
#define CTPPR_0         0x22028
// Address for the Constant table Programmable Pointer Register 1(CTPPR_1)
#define CTPPR_1         0x2202C


#define MOTOR_DECODER_ADDR   0x4804c000
#define LEFT_COUNT_BIT   14
#define RIGHT_COUNT_BIT  15

#define GPIO_DATAIN          0x138
#define GPIO_CLEARDATAOUT    0x190
#define GPIO_SETDATAOUT      0x194

.macro DELAY_100
MOV r10, 0
DELAY:
    ADD r10, r10, 1
    QBNE DELAY, r10, 0xe0
.endm


/*************** PRU0 ***********************/
.macro RIGHT_MOTOR_SPEED_PROC
.mparam pru_bit
    MOV r1, MOTOR_DECODER_ADDR | GPIO_SETDATAOUT
    MOV r2, MOTOR_DECODER_ADDR | GPIO_CLEARDATAOUT
    MOV r3, CONTROL_0
    MOV r4, 334
    MOV r5, 0

    SBBO r5, r3, 0xC, 4  // clear the cycle counter first

WAIT_FOR_PULSE:
    WBS r31, pru_bit
    SBBO r5, r3, 0xC, 4  // clear the cycle counter first
    LBBO r6, r3, 0xC, 4  // read the cycle counter
    WBC r31, pru_bit
    ADD r5, r5, 1
    QBGT WAIT_FOR_PULSE, r5, r4

    LBBO r6, r3, 0xC, 4  // read the cycle counter

STORE_RESULT:
    //Store result in into memory using constant table
    SBCO r6, CONST_PRUDRAM, 4, 4
    JMP ENDM

ENDM:

.endm




/*************** PRU1 ***********************/
.macro LEFT_MOTOR_SPEED_PROC
.mparam pru_bit
//    MOV r0, 1<<power_bit
    MOV r1, MOTOR_DECODER_ADDR | GPIO_SETDATAOUT
    MOV r2, MOTOR_DECODER_ADDR | GPIO_CLEARDATAOUT
    MOV r3, CONTROL_1
    MOV r4, 334
    MOV r5, 0

    SBBO r5, r3, 0xC, 4  // clear the cycle counter first
    SBBO r0, r1, 0, 4  // set decoder power high

WAIT_FOR_PULSE:
    WBS r31, pru_bit
    SBBO r5, r3, 0xC, 4  // clear the cycle counter first
    LBBO r6, r3, 0xC, 4  // read the cycle counter
    WBC r31, pru_bit
    ADD r5, r5, 1
    QBGT WAIT_FOR_PULSE, r5, r4


    LBBO r6, r3, 0xC, 4  // read the cycle counter

STORE_RESULT:
    //Store result in into memory using constant table
    SBCO r6, CONST_PRUDRAM, 4, 4
    JMP ENDM

ENDM:

.endm



// ***************************************
// *    Global Structure Definitions     *
// ***************************************


// ***************************************
// *     Global Register Assignments     *
// ***************************************


#endif //_PRU_memAccessPRUDataRAM_HP_
