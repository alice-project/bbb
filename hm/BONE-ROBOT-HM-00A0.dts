/*
 * Copyright (C) 2013 Bas Laarhoven
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * version 1.1 - 2013-08-01 initial version copied from 2191-R2.dts
 * version 1.2 - 2013-08-05 created version for BeBoPr with enable workaround.
 *               Can be used with all BeagleBone colors. On a BBB, use with
 *               uEnv.txt that disables HDMI and eMMC and loads this overlay,
 *               as shown below (optargs all on a single line!):
 *
 *                  optargs=quiet capemgr.disable_partno=BB-BONELT-HDMI,\
 *                                                       BB-BONELT-HDMIN,\
 *                                capemgr.enable_partno=bone-robot-hm
 *
 */
/dts-v1/;
/plugin/;

/ {
	compatible = "ti,beaglebone", "ti,beaglebone-black";

	/* identification */
	part-number = "BONE-ROBOT-HM";
	version = "00A0";

	exclusive-use =
	/* state the resources this cape uses */

	/* ------ PWM ------ */
		"P8.13",    /* EHRPWM2B */
		"P8.19",    /* EHRPWM2A */
		"P9.22",    /* EHRPWM0A */
		"ehrpwm0A",
		"ehrpwm2A",
		"ehrpwm2B",

	/* ------ DC MOTOR DIRECTION ------ */
		"P9.11",    /* gpio0.30 */
		"P9.12",    /* gpio1.28 */
		"P9.13",    /* gpio0.31 */
		"P9.14",    /* gpio1.18 */

	/* ------ DC MOTOR Decoder ------ */
        "P8.15",    /* pr1_pru0_pru_r31_15, leftside */
        "P8.16",    /* pr1_pru0_pru_r31_14, leftside */
        "P8.45",    /* pr1_pru1_pru_r31_0,  rightside */
        "P8.46",    /* pr1_pru1_pru_r31_1,  rightside */
		"pru0",
		"pru1",
		"pruss",

	/* ------ KEYES LED ------ */
        "P9.15",
        "P9.16",
        "P9.23",

	/* ------ MPU6050 ------ */
		/* the pin header uses */
		"P9.18",	/* i2c1_sda */
		"P9.17",	/* i2c1_scl */
		/* the hardware ip uses */
		"i2c1";

	/* ----------- PWM ------------ */
	fragment@10 {
		target = <&epwmss0>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@11 {
		target = <&ehrpwm0>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@12 {
		target = <&ecap0>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@13 {
		target = <&epwmss1>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@14 {
		target = <&ehrpwm1>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@15 {
		target = <&epwmss2>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@16 {
		target = <&ehrpwm2>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@17 {
		target = <&ecap2>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@18 {
		target = <&am33xx_pinmux>;
		__overlay__ {

			P8_13_ehrpwm_pin: P8_13_ehrpwm_pin {
				pinctrl-single,pins = <0x24  0x4>; /* P8_13 | MODE 4 */
			};

			P8_19_ehrpwm_pin: P8_19_ehrpwm_pin {
				pinctrl-single,pins = <0x20  0x4>; /* P8_19 | MODE 4 */
			};

			P9_22_ehrpwm_pin: P9_22_ehrpwm_pin {
				pinctrl-single,pins = <0x150  0x3>; /* P9_22 | MODE 3 */
			};

		};
	};

	fragment@19 {
		target = <&ocp>;
		__overlay__ {
			left_wheel {
				compatible	= "pwm_test";
				pwms		= <&ehrpwm2 1 20000000 0>;
				pwm-names	= "left_wheel";
				pinctrl-names	= "default";
				pinctrl-0	= <&P8_13_ehrpwm_pin>;
				enabled		= <0>;
				duty		= <1500000>;
				status		= "okay";
			};

			right_wheel {
				compatible	= "pwm_test";
				pwms		= <&ehrpwm2 0 20000000 0>;
				pwm-names	= "right_wheel";
				pinctrl-names	= "default";
				pinctrl-0	= <&P8_19_ehrpwm_pin>;
				enabled		= <0>;
				duty		= <1500000>;
				status		= "okay";
			};

			servo_motor_pwm {
				compatible	= "pwm_test";
				pwms		= <&ehrpwm0 0 20000000 0>;
				pwm-names	= "servo_motor";
				pinctrl-names	= "default";
				pinctrl-0	= <&P9_22_ehrpwm_pin>;
				enabled		= <0>;
				duty		= <1500000>;
				status		= "okay";
			};
		};
	};

	/* ----------- DC MOTOR DIRECTION ------------ */
	fragment@30 {
		target = <&am33xx_pinmux>;
		__overlay__ {

			robot_dcmotor_pins: robot_dcmotor_pins {
				status = "okay";
				pinctrl-single,pins = <
					0x70 0x27   /* P9_11, gpio0.30  */
					0x78 0x27   /* P9_12, gpio1.28  */
					0x74 0x27   /* P9_13, gpio0.31  */
					0x48 0x27   /* P9_14, gpio1.18  */
				>;
			};
		};
	};

	/* ----------- DC MOTOR Decoder ------------ */
	fragment@40 {
		target = <&am33xx_pinmux>;
		__overlay__ {
			motor_decoder_pins: motor_decoder_pins {
				status = "okay";
				pinctrl-single,pins = <
					0x3c 0x36  /* pr1_pru0_pru_r31_15, leftside, P8_15, mode6 in */
					0x38 0x36  /* pr1_pru0_pru_r31_14, leftside, P8_16, mode6 in */
					0xa0 0x36  /* pr1_pru1_pru_r31_0, P8_45, mode6 in */
					0xa4 0x36  /* pr1_pru1_pru_r31_1, P8_46, mode6 in */
				>;
			};
		};
	};

	fragment@41 {
		target = <&ocp>;
		__overlay__ {
			motor_des {
				compatible = "bone-pinmux-helper";
				status = "okay";
				pinctrl-names = "default";
				pinctrl-0 = <&motor_decoder_pins>;

				decoder1 {
					gpio-name = "motor_decoders:decoder1";
					gpio = <&gpio2 15 0>;
					input;
					init-low;
				};
				decoder2 {
					gpio-name = "motor_decoders:decoder2";
					gpio = <&gpio2 14 0>;
					input;
					init-low;
				};
				decoder3 {
					gpio-name = "motor_decoders:decoder3";
					gpio = <&gpio3 6 0>;
					input;
					init-low;
				};
				decoder4 {
					gpio-name = "motor_decoders:decoder4";
					gpio = <&gpio3 7 0>;
					input;
					init-low;
				};
			};
		};
	};

	fragment@42 {
		target = <&pruss>;
		__overlay__ {
			status = "okay";
		};
	};

	/* -------------------------- MPU6050 --------------------- */
	fragment@50 {
		target = <&am33xx_pinmux>;
		__overlay__ {
			bb_i2c1_pins: pinmux_bb_i2c1_pins {
				pinctrl-single,pins = <
					0x158 0x72	/* spi0_d1.i2c1_sda, SLEWCTRL_SLOW | INPUT_PULLUP | MODE2 */
					0x15c 0x72	/* spi0_cs0.i2c1_scl, SLEWCTRL_SLOW | INPUT_PULLUP | MODE2 */
				>;
			};
		};
	};

	fragment@51 {
		target = <&i2c1>;	/* i2c1 is numbered correctly */
		__overlay__ {
			status = "okay";
			pinctrl-names = "default";
			pinctrl-0 = <&bb_i2c1_pins>;

			/* this is the configuration part */
			clock-frequency = <100000>;

			#address-cells = <1>;
			#size-cells = <0>;

			/* add any i2c devices on the bus here */

			// commented out example of a touchscreen (taken from BB-BONE-LCD7-01-00A4) */
			// maxtouch@4a {
			//	compatible = "mXT224";
			//	reg = <0x4a>;
			//	interrupt-parent = <&gpio4>;
			//	interrupts = <19 0x0>;
			//	atmel,irq-gpio = <&gpio4 19 0>;
			// };
		};
	};

	/* ----------- shining KEYES LED ------------ */
	fragment@60 {
		target = <&am33xx_pinmux>;
		__overlay__ {

			keyes_led_pins: keyes_led_pins {
				status = "okay";
				pinctrl-single,pins = <
					0x40 0x37   /* P9_15, gpio1.16, RED  */
					0x4c 0x37   /* P9_16, gpio1.19, GREEN  */
					0x44 0x37   /* P9_23, gpio1.17, BLUE  */
				>;
			};
		};
	};


};
