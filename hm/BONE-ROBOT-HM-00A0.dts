/*
 * Copyright (C) 2013 Bas Laarhoven
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * version 1.1 - 2013-08-01 initial version copied from 2191-R2.dts
 * version 1.2 - 2013-08-05 created version for BeBoPr with enable workaround.
 *               Can be used with all BeagleBone colors. On a BBB, use with
 *               uEnv.txt that disables HDMI and eMMC and loads this overlay,
 *               as shown below (optargs all on a single line!):
 *
 *                  optargs=quiet capemgr.disable_partno=BB-BONELT-HDMI,\
 *                                                       BB-BONELT-HDMIN,\
 *                                capemgr.enable_partno=bone-robot-hm
 *
 */
/dts-v1/;
/plugin/;

/ {
	compatible = "ti,beaglebone", "ti,beaglebone-black";

	/* identification */
	part-number = "BONE-ROBOT-HM";
	version = "00A0";

	exclusive-use =
	/* state the resources this cape uses */

	/* ------ usonic TRIGGER ------ */
		"P8.7",		/* gpio2.2  gpio66 */
		"P8.8",		/* gpio2.3  gpio67 */
		"P8.9",		/* gpio2.5  gpio69 */
		"P8.10",	/* gpio2.4  gpio68 */

	/* ------ usonic ECHO ------ */
		"P9.28",		/* gpio3.17  gpio113 */
		"P9.29",		/* gpio3.15  gpio111 */
		"P9.30",		/* gpio3.16  gpio112 */
		"P9.31",    	/* gpio3.14  gpio110 */
		"pru0",
		"pruss",

	/* ------ PWM ------ */
		"P8.13",    /* EHRPWM2B */
		"P8.19",    /* EHRPWM2A */
		"P9.22",    /* EHRPWM0A */
		"ehrpwm0A",
		"ehrpwm2A",
		"ehrpwm2B",

	/* ------ DC MOTOR DIRECTION ------ */
		"P9.11",    /* gpio0.30 */
		"P9.12",    /* gpio1.28 */
		"P9.13",    /* gpio2.31 */
		"P9.14";    /* gpio1.18 */


	/* ----------- usonic TRIGGER ------------ */

	fragment@0 {
		target = <&am33xx_pinmux>;
		__overlay__ {
			usonic_trigger_enable_pins: usonic_trigger_pins {
				pinctrl-single,pins = <
					0x90 0x07  /*  P8-7 */
					0x94 0x07  /*  P8-8 */
					0x9c 0x07  /*  P8-9 */
					0x98 0x07  /*  P8-10 */
				>;
			};
		};
	};

	fragment@1 {
		target = <&ocp>;
		__overlay__ {
			usonic_trigger_enables {
				compatible = "gpio-of-helper";
				status = "okay";
				pinctrl-names = "default";
				pinctrl-0 = <&usonic_trigger_enable_pins>;

				usonic1_trigger {
					gpio-name = "robot:usonic1_trigger";
					gpio = <&gpio3 2 0>;
					output;
					init-low;
				};
				usonic2_trigger {
					gpio-name = "robot:usonic2_trigger";
					gpio = <&gpio3 3 0>;
					output;
					init-low;
				};
				usonic3_trigger {
					gpio-name = "robot:usonic3_trigger";
					gpio = <&gpio3 5 0>;
					output;
					init-low;
				};
				usonic4_trigger {
					gpio-name = "robot:usonic4_trigger";
					gpio = <&gpio3 4 0>;
					output;
					init-low;
				};
			};
		};
	};

	/* ----------- PWM ------------ */
	fragment@10 {
		target = <&epwmss0>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@11 {
		target = <&ehrpwm0>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@12 {
		target = <&ecap0>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@13 {
		target = <&epwmss1>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@14 {
		target = <&ehrpwm1>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@15 {
		target = <&epwmss2>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@16 {
		target = <&ehrpwm2>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@17 {
		target = <&ecap2>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@18 {
		target = <&am33xx_pinmux>;
		__overlay__ {

			P8_13_ehrpwm_pin: P8_13_ehrpwm_pin {
				pinctrl-single,pins = <0x24  0x4>; /* P8_13 | MODE 4 */
			};

			P8_19_ehrpwm_pin: P8_19_ehrpwm_pin {
				pinctrl-single,pins = <0x20  0x4>; /* P8_19 | MODE 4 */
			};

			P9_22_ehrpwm_pin: P9_22_ehrpwm_pin {
				pinctrl-single,pins = <0x150  0x3>; /* P9_22 | MODE 3 */
			};

		};
	};

	fragment@19 {
		target = <&ocp>;
		__overlay__ {
			left_wheel {
				compatible	= "pwm_test";
				pwms		= <&ehrpwm2 1 20000000 0>;
				pwm-names	= "left_wheel";
				pinctrl-names	= "default";
				pinctrl-0	= <&P8_13_ehrpwm_pin>;
				enabled		= <0>;
				duty		= <1500000>;
				status		= "okay";
			};

			right_wheel {
				compatible	= "pwm_test";
				pwms		= <&ehrpwm2 0 20000000 0>;
				pwm-names	= "right_wheel";
				pinctrl-names	= "default";
				pinctrl-0	= <&P8_19_ehrpwm_pin>;
				enabled		= <0>;
				duty		= <1500000>;
				status		= "okay";
			};

			servo_motor_pwm {
				compatible	= "pwm_test";
				pwms		= <&ehrpwm0 0 20000000 0>;
				pwm-names	= "servo_motor";
				pinctrl-names	= "default";
				pinctrl-0	= <&P9_22_ehrpwm_pin>;
				enabled		= <0>;
				duty		= <1500000>;
				status		= "okay";
			};
		};
	};

	/* ----------- usonic ECHO ------------ */
	fragment@21 {
		target = <&am33xx_pinmux>;
		__overlay__ {
			usonic_echo_pins: usonic_echo_pins {
				status = "okay";
				pinctrl-single,pins = <
					/* stepper outputs */
					0x19c 0x36  /* pr1_pru0_pru_r31_3,  P9_28, gpio3.17, mode6 in */
					0x194 0x36  /* pr1_pru0_pru_r31_1,  P9_29, gpio3.15, mode6 in */
					0x198 0x36  /* pr1_pru0_pru_r31_2,  P9_30, gpio3.16, mode6 in */
					0x190 0x36  /* pr1_pru0_pru_r31_0,  P9_31, gpio3.14, mode6 in */
				>;
			};
		};
	};

	fragment@22 {
		target = <&ocp>;
		__overlay__ {
			usonic_echos {
				compatible = "bone-pinmux-helper";
				status = "okay";
				pinctrl-names = "default";
				pinctrl-0 = <&usonic_echo_pins>;

				usonic1 {
					gpio-name = "usonic_echos:usonic1";
					gpio = <&gpio4 17 0>;
					input;
/*					init-low;*/
				};
				usonic2 {
					gpio-name = "usonic_echos:usonic2";
					gpio = <&gpio4 15 0>;
					input;
/*					init-low;*/
				};
				usonic3 {
					gpio-name = "usonic_echos:usonic3";
					gpio = <&gpio4 16 0>;
					input;
/*					init-low;*/
				};
				usonic4 {
					gpio-name = "usonic_echos:usonic4";
					gpio = <&gpio4 14 0>;
					input;
/*					init-low;*/
				};
			};
		};
	};

	fragment@23 {
		target = <&pruss>;
		__overlay__ {
			status = "okay";
		};
	};

	/* ----------- DC MOTOR DIRECTION ------------ */

	fragment@31 {
		target = <&am33xx_pinmux>;
		__overlay__ {

			robot_dcmotor_pins: robot_dcmotor_pins {
				status = "okay";
				pinctrl-single,pins = <
					/* sensor inputs with pull-downs */
					0x70 0x07   /* P9_11, gpio0.30  */
					0x78 0x07   /* P9_12, gpio1.28  */
					0x74 0x07   /* P9_13, gpio0.31  */
					0x48 0x07   /* P9_14, gpio1.18  */
				>;
			};
		};
	};

};
